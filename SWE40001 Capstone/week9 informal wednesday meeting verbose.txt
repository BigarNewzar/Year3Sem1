
Meeting Started at 12:30 PM


Rob's shinanigans with electron and react
channels and promises
helix--- notepad equivalent stuffy

main---nodejs backend--sleuthkit system level stuff

renderer --dom model-- user end stuff level

sleuthkit library stuff in main--importing files

volume sys tool---uses typescript


runner stuff---binary stinrg---sleughtkit tool

callback function--should take in array (2d string array or matrix)---run command---splits output to grid of text---

[preoad--- causes issue if not run as root]

fls  the image--- then passes to callback function

can easily add wrappers around it
ipcMain.on---tell front end what to listen to---then tells backend to tell the partition to the front end---simplifies file getting process

run tooll--makes new partition table object

takes in generic matrix and builds partition table form that

so first line---DOS partition table setup...so sticks it with spacebar in middle

sector size on line 2 and counts for 3rd entry and returns that after splitts unnecessary stuff away---convert to number--passes to front end (index.tsk)

index.tsk---takes info (as they were listening for it)---converts it to partition table and put them as dom model and passes it to electron as object---can be converted into an obj too


preload causes jank issue---electron handler isnt working as intended....its supposed to say list of static channel....
he removed that to enable us to create channels as we need...so now anything that is listening for that channel and we send anything on the channel, it will work as no security is there to check or stop it

better way or official way ----specifying the channels in the preload


another isue with Runner---async runtool---can error out if more than 200kb of data of output as its for short info output---due to buffer error---so it would cause it to crash or not work properly

alterntativ to that---using spawn function instead---so instead of returning output as string....it outputs as streams using standard output stdout...then uses console log to send it  through the channel and let front end listen to and do stuff to it.....

instead of using array...just stream object to front end....
so write in such a way that its recieving files and processing it in front end

so no huge object in backend...instead passing them bit by bit into the front end as small objects as they are read from backend part by part......can cause issue if multiple medium size files for huge number of files

how does streams work?
its async + doesnt use promises but uses callbacks

the stdout.on function.....how are we sending it across the channel?
when is it called? how much data per call?

wc tag c----get buffer --set it to number of bytes in directory----can do what streaming down without goes for steam workaround


electron is not built on callback

can we reliabily say about the size? if not maybe not consider about buffer max level?

streams --data being sent in small packets---size of packets can cause issue---some data can be splitted in middle and can cause an issue in when passing them to objects later on or smth
---basically issue becomes similiar to routing  info issue

can use newline detection to ensure splitting doesnt occur mid file


------------------ROB has to go to park his car
maybe a design pattern to ensure proper file handling for the channel setup

one channel for every later




SADDR---it has simple architecture diagram----mafaz gave detailed one on discord---will be placed on the last document---DADDR---all the plans---can 


Task for Me and Thanh:
Learn react--make a simple application on it---like library app to collect books and stuff---ensure it uses react and stuff + API call to goole and stuff + bootstrapper + sent through channel to make the prmise--main sends out the api---dynamic channel setup + object issue __may need to loop trough the model---must always return smth---returns to any calls that have been made from renderer---regardless of outcome success or not---may or may not return as promise--will get translated to data in renderer++ can work in react---component calls functions in handler---calls a button in another component---handle adds collection in shelf
---general resource on discord has that info



--------ROb came back------
found way to resolve it using stdout---basically pass it to object and then just process it

pass data to file to process

fls has commands to display deleted files ++ can make timeline using that using time timeline format command ++ It spaced by tabs ++ can be use that 



broken = ""

let line = data.toString().split('\n')

whilst(line.length != 0)
for each c in line 
	broken += c
broken.split('\n')


asasasasas asasasasas
asasasasasas bvbvbvbvbvbv 
bvbbvbvbvbvb

asasasasas asasasasas asasasasasas 
bvbvbvbvbvbv bvbbvbvbvbvb




we will use spawn---read whole thing into a objects and work with that


---official meeting ended at 2:00PM

---mini-unofficial meeting between me, Thanh and Rob continued onwords

attempting to correct the final problem + going through the previous documentations and proofreading them

+read through mafaz's section


Worked from 12:30PM to 7PM



